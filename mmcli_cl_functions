#!/bin/bash

## mmcli-cl functions 
## -- for my Modem DirectIP-manual connection
##
## (using mmcli 1.18.6)
## <massimo.manzato@gmail.com>

wd=$(dirname "$0")

function datetime()
{
	date +"%A, %-d %B %Y - %T %Z"
}

function isModemNotExists()
{
		local modm=$(mmcli -L |grep -m 1 "Modem")
		[[ -z "$modm" ]] && return 0
		return 1
}

function bearer()
{
		local ib=$(mmcli -m "$im" |grep -m 1 "Bearer" |cut -d/ -f6)
		[[ -z "$ib" ]] && echo "No any bearer." && return 1

		printf "%s execute: -->> mmcli -m %s -b %s %s <<--\n" "$(date +%T)" "$im" "$ib" "$@"
		mmcli -m "$im" -b "$ib" "$@"
		return 0
}

function check()
{

 		im=$(mmcli -L |grep -m 1 "Modem" |cut -d/ -f6 |awk '{print $1}')
		local ib=$(mmcli -m "$im" |grep -m 1 "Bearer" |cut -d/ -f6)
		declare -A arrayA="( $(mmcli -K --bearer $ib | awk '{ printf "[\"%s\"]=\"%s\" ", $1, $3}' ) )"
		result="${arrayA[bearer.status.connected]}"
}

function setIPandROUTE()
{
		local ib=$(mmcli -m "$im" |grep -m 1 "Bearer" |cut -d/ -f6)
		declare -A arrayA="( $(mmcli -K --bearer $ib | awk '{ printf "[\"%s\"]=\"%s\" ", $1, $3}' ) )"

		printf "Interface: %s\n" "${arrayA[bearer.status.interface]}"
		ip link set up dev "${arrayA[bearer.status.interface]}"

		# remove the actual ip on interface
		ip a flush "${arrayA[bearer.status.interface]}"

		printf "execute:  ip a replace %s dev %s\n" "${arrayA[bearer.ipv4-config.address]}/${arrayA[bearer.ipv4-config.prefix]}" "${arrayA[bearer.status.interface]}"
		ip a replace "${arrayA[bearer.ipv4-config.address]}/${arrayA[bearer.ipv4-config.prefix]}" dev "${arrayA[bearer.status.interface]}"

		printf "execute: ip r a default via %s \n" "${arrayA[bearer.ipv4-config.gateway]}"
		ip r a default via "${arrayA[bearer.ipv4-config.gateway]}"

		#echo "${arrayA[bearer.ipv4-config.address]}/${arrayA[bearer.ipv4-config.prefix]}"
}

#function setIPandNSS()
#{
	# OLD Function consider to remove
			#!SCNETDNS?
			#!SCPADDR=<pid>

#		local res=$(mmcli -m "$im" --command=AT+CGCONTRDP)
#		local ip=$( echo "$res" |cut -d, -f4)
#		local ns1=$(echo "$res" |cut -d, -f6)
#		local ns2=$(echo "$res" |cut -d, -f7)
#
#		ip set up dev wwan0 "$ip" set up
#		ip add default via "$ip"
#		echo "nameserver $ns1" > /etc/resolv.conf
#		echo "nameserver $ns2" >> /etc/resolv.conf
#
#			## dnsmasq with ISP DNSs and Google DNSs
#			#cp -a /etc/resolv.conf /etc/resolv.dnsmasq.conf
#			#sed -i '1i\'"nameserver 8.8.8.8\nnameserver 8.8.4.4" /etc/resolv.dnsmasq.conf
#			#sed -i '1i\'"nameserver 127.0.0.1" /etc/resolv.conf
#
#		## dnsmasq with Google DNSs only
#		echo "nameserver 127.0.0.1" > /etc/resolv.conf
#		echo "nameserver 8.8.8.8" > /etc/resolv.dnsmasq.conf
#		echo "nameserver 8.8.4.4" >> /etc/resolv.dnsmasq.conf
#
#		echo "$ip"
#		echo "$ns1"
#		echo "$ns2"
#}

function isNetworkFailed()
{
		local state=$(mmcli -m "$im" | grep -m 1 state | awk '{print $3}' | cut -d\' -f2)
		[[ "$state" == 'registered' ]] && return 1
		return 0
}

function disconnectx()
{
		echo "Disconnecting.."
		local scpid=$(pgrep "etup-connection")
			#echo scpid=$scpid
		[[ -n "$scpid" ]] && kill -s 15 "$scpid" && echo Cancelled.
		pkill ping
		echo -n > /dev/shm/NOT-CONNECTED
		bearer -x
		mmcli -m "$im" --simple-disconnect
		ip r d default

		#This disconnects the existing connection(s) for the modem and puts it into a low power mode
		mmcli -m "$im" -d
		sleep 2

		#Resets the modem to the settings it had when it was power cycled. 
		mmcli -m "$im" -r
		sleep 1
		sv restart ModemManager
		datetime
		btime=$(date +%s)
		exit
}

function connectx()
{
		"$wd/setup-connection" &
			   #scpid=$!
		wait $!
		scpid=
		im=$(mmcli -L |grep -m 1 "Modem" |cut -d/ -f6 |awk '{print $1}')
}

